"use client";
import { authApi } from "@/api/authApi";
import Header from "@/components/Molecules/Header";
import AntdProvider from "@/lib/AntdProvider";
import { store } from "@/rtk/store";
import { validateJwtToken } from "@/utils/jwt";
import { AntdRegistry } from "@ant-design/nextjs-registry";
import {
  ApolloClient,
  ApolloProvider,
  InMemoryCache,
  createHttpLink,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";
import { ConfigProvider } from "antd";
import { Inter } from "next/font/google";
import { Provider } from "react-redux";
import "./globals.css";
import NoData from "@/components/Atoms/NoData";

const inter = Inter({ subsets: ["latin"] });

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const httpLink = createHttpLink({
  uri: process.env.NEXT_PUBLIC_HASURA_API_URL,
  credentials: "include",
});

const authLink = setContext(async (_, { headers }) => {
  // get the authentication token from local storage if it exists
  // const token = JWTManager.getToken();
  let token = localStorage.getItem("accessToken");
  if (token) {
    const verifyToken = validateJwtToken(token);
    if (!verifyToken) {
      const { data } = await authApi.refreshToken();

      if (data) {
        const { accessToken } = data;
        localStorage.setItem("accessToken", accessToken);
        token = accessToken;
      } else {
        localStorage.removeItem("accessToken");
        // remove cookie
        document.cookie =
          "refreshToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
      }
    }
  }
  // return the headers to the context so httpLink can read them
  return {
    headers: {
      ...headers,
      authorization: token ? `Bearer ${token}` : "",
    },
  };
});

const client = new ApolloClient({
  link: authLink.concat(httpLink),
  cache: new InMemoryCache(),
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <Provider store={store}>
      <ApolloProvider client={client}>
        <AntdRegistry>
          <ConfigProvider
            theme={{
              token: {
                colorPrimary: "#FEDB39",
              },
            }}
            renderEmpty={() => <NoData />}
          >
            <AntdProvider>
              <html lang="en">
                <body className={inter.className}>
                  <Header />
                  <div className="flex justify-center w-full py-header min-h-screen text-black">
                    <div className="max-w-[1200px] w-full">{children}</div>
                  </div>
                </body>
              </html>
            </AntdProvider>
          </ConfigProvider>
        </AntdRegistry>
      </ApolloProvider>
    </Provider>
  );
}
